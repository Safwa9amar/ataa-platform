/**
 * ุญุณุงุจ ูุนุฏู ุงูุชูุงุนู (Engagement Rate)
 * @param {number} uniqueDonors - ุนุฏุฏ ุงููุชุจุฑุนูู ุงููุฑูุฏูู ุฎูุงู ุงููุชุฑุฉ
 * @param {number} totalDonations - ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ุฎูุงู ุงููุชุฑุฉ
 * @returns {number} ูุนุฏู ุงูุชูุงุนู ููุณุจุฉ ูุฆููุฉ
 */
function engagementRate(uniqueDonors, totalDonations) {
  return uniqueDonors > 0 ? (totalDonations / uniqueDonors) * 100 : 0;
}
/**
 * ุญุณุงุจ ูุนุฏู ุงูููู (Growth Rate)
 * @param {number} previousDonors - ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ
 * @param {number} newDonors - ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฌุฏุฏ ุฎูุงู ุงููุชุฑุฉ
 * @returns {number} ูุนุฏู ุงูููู ููุณุจุฉ ูุฆููุฉ
 */
function growthRate(previousDonors, newDonors) {
  // ุฅุฐุง ูู ููู ููุงู ุชุจุฑุนุงุช ุณุงุจูุฉุ ุณูููู ุงูููู 0%
  if (previousDonors === 0 && newDonors === 0) {
    return 0;
  }

  // ุฅุฐุง ูุงูุช ูุชุฑุฉ ุงููุชุจุฑุนูู ุงูุณุงุจูุฉ ูู 0 ููุงู ููุงู ุชุจุฑุน ุฌุฏูุฏุ ูุชู ุงุนุชุจุงุฑ ุงูููู 100%
  if (previousDonors === 0 && newDonors > 0) {
    return 100;
  }

  // ุฅุฐุง ูุงูุช ุงููููุฉ ุงูุณุงุจูุฉ ุฃูุจุฑ ูู 0ุ ูุญุณุจ ูุนุฏู ุงูููู
  const growth = ((newDonors - previousDonors) / previousDonors) * 100;

  // ูุญุฏุฏ ุงูุญุฏ ุงูุฃุนูู ูุงูุฃุฏูู
  return Math.max(-100, Math.min(100, growth)).toFixed(2);
}


/**
 * ุญุณุงุจ ูุนุฏู ุชุญุฏูุซ ุงููุญุชูู (Update Frequency)
 * @param {number} daysInPeriod - ุนุฏุฏ ุงูุฃูุงู ูู ุงููุชุฑุฉ ุงููุญุฏุฏุฉ
 * @param {number} recentUpdates - ุนุฏุฏ ุงูุชุญุฏูุซุงุช ุฎูุงู ุขุฎุฑ 30 ููููุง
 * @returns {number} ูุนุฏู ุชุญุฏูุซ ุงููุญุชูู
 */
function updateFrequency(daysInPeriod, recentUpdates) {
  return daysInPeriod > 0 ? recentUpdates / daysInPeriod : 0;
}

/**
 * ุญุณุงุจ ุฏุฑุฌุฉ ูุดุงุท ุงูุญุณุงุจ (Account Activity Score)
 * ูุชู ุงุญุชุณุงุจูุง ุจูุงุกู ุนูู ุนุฏุฉ ุนูุงูู ููููุง ููุฃูุฒุงู ุงูุชุงููุฉ:
 * W1 = 0.4 ููุนุฏู ุงูุชูุงุนู
 * W2 = 0.2 ูุนุฏุฏ ุงูุชุญุฏูุซุงุช ุงูุฃุฎูุฑุฉ
 * W3 = 0.3 ููุนุฏู ุงูููู
 * W4 = 0.1 ููุณุชูู ุงูุชุญุฏูุซ
 * @param {number} engagement - ูุนุฏู ุงูุชูุงุนู
 * @param {number} updates - ุนุฏุฏ ุงูุชุญุฏูุซุงุช ุงูุฃุฎูุฑุฉ
 * @param {number} growth - ูุนุฏู ุงูููู
 * @param {number} frequency - ูุนุฏู ุชุญุฏูุซ ุงููุญุชูู
 * @returns {number} ุฏุฑุฌุฉ ูุดุงุท ุงูุญุณุงุจ
 */
function accountActivityScore(engagement, updates, growth, frequency) {
  const W1 = 0.4,
    W2 = 0.2,
    W3 = 0.3,
    W4 = 0.1;
  return W1 * engagement + W2 * updates + W3 * growth + W4 * frequency;
}

/**
 * ุญุณุงุจ ูุนุฏู ุงูุงุญุชูุงุธ ุจุงููุชุจุฑุนูู (Donor Retention Rate)
 * @param {number} previousTotalDonors - ุฅุฌูุงูู ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ
 * @param {number} returningDonors - ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฐูู ุชุจุฑุนูุง ูุฑุฉ ุฃุฎุฑู
 * @returns {number} ูุนุฏู ุงูุงุญุชูุงุธ ุจุงููุชุจุฑุนูู ููุณุจุฉ ูุฆููุฉ
 */
function retentionRate(previousTotalDonors, returningDonors) {
  return previousTotalDonors > 0
    ? (returningDonors / previousTotalDonors) * 100
    : 0;
}

/**
 * ุญุณุงุจ ูุนุฏู ููู ุงููุชุจุฑุนูู ููู ุจุฑูุงูุฌ (Program Donor Growth Rate)
 * @param {number} newDonors - ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฌุฏุฏ ูุจุฑูุงูุฌ ูุนูู
 * @param {number} totalDonors - ุงูุนุฏุฏ ุงูุฅุฌูุงูู ูููุชุจุฑุนูู ููุจุฑูุงูุฌ
 * @returns {number} ูุนุฏู ููู ุงููุชุจุฑุนูู ููู ุจุฑูุงูุฌ ููุณุจุฉ ูุฆููุฉ
 */
function programDonorGrowthRate(newDonors, totalDonors) {
  return totalDonors > 0 ? (newDonors / totalDonors) * 100 : 0;
}

/**
 * ุญุณุงุจ ูุนุฏู ุฅููุงู ุงูุจุฑุงูุฌ (Program Completion Rate)
 * @param {number} completedPrograms - ุนุฏุฏ ุงูุจุฑุงูุฌ ุงูููุชููุฉ ุจูุฌุงุญ
 * @param {number} totalPrograms - ุฅุฌูุงูู ุนุฏุฏ ุงูุจุฑุงูุฌ
 * @returns {number} ูุนุฏู ุฅููุงู ุงูุจุฑุงูุฌ ููุณุจุฉ ูุฆููุฉ
 */
function programCompletionRate(completedPrograms, totalPrograms) {
  return totalPrograms > 0 ? (completedPrograms / totalPrograms) * 100 : 0;
}

/**
 * ุญุณุงุจ ุฅุฌูุงูู ุงูุชุจุฑุนุงุช (Total Donations)
 * @param {number[]} donations - ูุตูููุฉ ุชุญุชูู ุนูู ูุจุงูุบ ุงูุชุจุฑุนุงุช ุงููุฎุชููุฉ
 * @returns {number} ุฅุฌูุงูู ุงูุชุจุฑุนุงุช
 */
function totalDonations(donations) {
  return donations.reduce((sum, donation) => sum + donation, 0);
}
/**
 * ๐ ุญุณุงุจ ูุนุฏู ููู ุงูุชุจุฑุนุงุช (Donation Growth Rate)
 *
 * ูุญุณุจ ูุนุฏู ุงูููู ุจูู ูุชุฑุชูู ููุณุจุฉ ูุฆููุฉุ ููุญุฏ ุงููุชูุฌุฉ ุจูู -100% ู +100%.
 *
 * @param {number} previous - ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ
 * @param {number} current - ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ูู ุงููุชุฑุฉ ุงูุญุงููุฉ
 * @param {number} [precision=2] - ุนุฏุฏ ุงูุฃุฑูุงู ุจุนุฏ ุงููุงุตูุฉ ุงูุนุดุฑูุฉ
 * @returns {number} ูุนุฏู ุงูููู ุจุงููุณุจุฉ ุงููุฆููุฉ
 */
function donationGrowthRate(previous, current, precision = 2) {
  if (typeof previous !== "number" || typeof current !== "number") return 0;

  // ูุง ูููู ุญุณุงุจ ูุนุฏู ุงูููู ุฅู ูู ุชูุฌุฏ ุจูุงูุงุช ุณุงุจูุฉ
  if (previous <= 0) return 0;

  const growth = ((current - previous) / previous) * 100;

  // ุชุญุฏูุฏ ุงูุญุฏ ุงูุฃุฏูู ูุงูุฃูุตู ูููููุฉ
  const clampedGrowth = Math.max(-100, Math.min(100, growth));

  // ุชูุฑูุจ ุงููุชูุฌุฉ
  return parseFloat(clampedGrowth.toFixed(precision));
}


/**
 * ุญุณุงุจ ุตุงูู ุงูุฏุฎู (Net Income)
 * @param {number} revenue - ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช
 * @param {number} expenses - ุฅุฌูุงูู ุงููููุงุช
 * @returns {number} ุตุงูู ุงูุฏุฎู
 */
function netIncome(revenue, expenses) {
  return revenue - expenses;
}

/**
 * Calculate the Gross Profit Margin (ูุงูุด ุงูุฑุจุญ ุงูุฅุฌูุงูู).
 * The formula used is:
 * ูุงูุด ุงูุฑุจุญ ุงูุฅุฌูุงูู = (ุตุงูู ุงูุฑุจุญ ุงูุฅุฌูุงูู / ุงูุฅูุฑุงุฏุงุช) ร 100
 *
 * @param {number} netProfit - The net profit (ุตุงูู ุงูุฑุจุญ ุงูุฅุฌูุงูู).
 * @param {number} revenue - The total revenue (ุงูุฅูุฑุงุฏุงุช).
 * @returns {number|string} - The Gross Profit Margin in percentage, or an error message if revenue is 0.
 */
function calculateGrossProfitMargin(netProfit, revenue) {
  // Check if revenue is zero to avoid division by zero error
  if (revenue === 0) {
    return 0;
  }

  // Calculate the gross profit margin
  const grossProfitMargin = (netProfit / revenue) * 100;

  // Return the result as a percentage
  return grossProfitMargin;
}

/**
 * Calculate the Donation to Expense Ratio (ูุณุจุฉ ุงูุชุจุฑุนุงุช ุฅูู ุงููููุงุช).
 * The formula used is:
 * ูุณุจุฉ ุงูุชุจุฑุนุงุช ุฅูู ุงููููุงุช = (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช / ุฅุฌูุงูู ุงููููุงุช) ร 100
 *
 * @param {number} totalDonations - The total donations (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช).
 * @param {number} totalExpenses - The total expenses (ุฅุฌูุงูู ุงููููุงุช).
 * @returns {number|string} - The Donation to Expense Ratio in percentage, or an error message if expenses is 0.
 */
function calculateDonationToExpenseRatio(totalDonations, totalExpenses) {
  // Check if total expenses is zero to avoid division by zero error
  if (totalExpenses === 0) {
    return 0;
  }

  // Calculate the donation to expense ratio
  const donationToExpenseRatio = (totalDonations / totalExpenses) * 100;

  // Return the result as a percentage
  return donationToExpenseRatio;
}

/**
 * Calculate the Revenue Growth Rate (ูุนุฏู ููู ุงูุฅูุฑุงุฏุงุช).
 * The formula used is:
 * ูุนุฏู ููู ุงูุฅูุฑุงุฏุงุช = ((ุงูุฅูุฑุงุฏุงุช ูู ุงููุชุฑุฉ ุงูุญุงููุฉ โ ุงูุฅูุฑุงุฏุงุช ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ) / ุงูุฅูุฑุงุฏุงุช ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ) ร 100
 *
 * @param {number} currentRevenue - The current period revenue (ุงูุฅูุฑุงุฏุงุช ูู ุงููุชุฑุฉ ุงูุญุงููุฉ).
 * @param {number} previousRevenue - The previous period revenue (ุงูุฅูุฑุงุฏุงุช ูู ุงููุชุฑุฉ ุงูุณุงุจูุฉ).
 * @returns {number|string} - The Revenue Growth Rate in percentage, or an error message if previous revenue is 0.
 */
function calculateRevenueGrowthRate(currentRevenue, previousRevenue) {
  // Check if previous revenue is zero to avoid division by zero error
  if (previousRevenue === 0) {
    return "Previous revenue cannot be zero";
  }

  // Calculate the revenue growth rate
  const revenueGrowthRate =
    ((currentRevenue - previousRevenue) / previousRevenue) * 100;

  // Return the result as a percentage
  return revenueGrowthRate;
}

/**
 * Calculate the Operating Expense to Revenue Ratio (ูุณุจุฉ ูููุงุช ุงูุชุดุบูู ุฅูู ุงูุฅูุฑุงุฏุงุช).
 * The formula used is:
 * ูุณุจุฉ ูููุงุช ุงูุชุดุบูู ุฅูู ุงูุฅูุฑุงุฏุงุช = (ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช / ุฅุฌูุงูู ุงููููุงุช ุงูุชุดุบูููุฉ) ร 100
 *
 * @param {number} totalRevenue - The total revenue (ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช).
 * @param {number} totalOperatingExpenses - The total operating expenses (ุฅุฌูุงูู ุงููููุงุช ุงูุชุดุบูููุฉ).
 * @returns {number|string} - The Operating Expense to Revenue Ratio in percentage, or an error message if operating expenses is 0.
 */
function calculateOperatingExpenseToRevenueRatio(
  totalRevenue,
  totalOperatingExpenses
) {
  // Check if total operating expenses is zero to avoid division by zero error
  if (totalOperatingExpenses === 0) {
    return "Total operating expenses cannot be zero";
  }

  // Calculate the operating expense to revenue ratio
  const operatingExpenseToRevenueRatio =
    (totalRevenue / totalOperatingExpenses) * 100;

  // Return the result as a percentage
  return operatingExpenseToRevenueRatio;
}

/**
 * Calculate the Donations Per Program Ratio (ูุณุจุฉ ุงูุชุจุฑุนุงุช ููู ุจุฑูุงูุฌ).
 * The formula used is:
 * ูุณุจุฉ ุงูุชุจุฑุนุงุช ููู ุจุฑูุงูุฌ = (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ุงููุณุชููุฉ / ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ุงููุฎุตุตุฉ ููุจุฑูุงูุฌ) ร 100
 *
 * @param {number} totalDonationsReceived - The total donations received (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ุงููุณุชููุฉ).
 * @param {number} totalDonationsAllocated - The total donations allocated to the program (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช ุงููุฎุตุตุฉ ููุจุฑูุงูุฌ).
 * @returns {number|string} - The Donations Per Program Ratio in percentage, or an error message if allocated donations is 0.
 */
function calculateDonationsPerProgramRatio(
  totalDonationsReceived,
  totalDonationsAllocated
) {
  // Check if total donations allocated is zero to avoid division by zero error
  if (totalDonationsAllocated === 0) {
    return "Total donations allocated to the program cannot be zero";
  }

  // Calculate the donations per program ratio
  const donationsPerProgramRatio =
    (totalDonationsReceived / totalDonationsAllocated) * 100;

  // Return the result as a percentage
  return donationsPerProgramRatio;
}
/**
 * Calculates the average donation size (ูุชูุณุท ุญุฌู ุงูุชุจุฑุน).
 * Formula:
 *   ูุชูุณุท ุงูุชุจุฑุน = ุฅุฌูุงูู ุงูุชุจุฑุนุงุช / ุนุฏุฏ ุงูุชุจุฑุนุงุช
 *
 * @param {number} totalAmount - ุฅุฌูุงูู ูุจูุบ ุงูุชุจุฑุนุงุช.
 * @param {number} donationCount - ุนุฏุฏ ุนูููุงุช ุงูุชุจุฑุน.
 * @returns {number} ูุชูุณุท ูููุฉ ุงูุชุจุฑุน (ุจุฏูุฉ ููุฒูุชูู ุนุดุฑูุชูู)ุ ุฃู 0 ุฅุฐุง ูู ุชูู ููุงู ุชุจุฑุนุงุช.
 */
function calculateAverageDonationSize(totalAmount, donationCount) {
  if (!donationCount || donationCount <= 0) {
    return 0;
  }

  const average = totalAmount / donationCount;
  return parseFloat(average.toFixed(2)); // ุฏูุฉ ููุฒูุชูู ุนุดุฑูุชูู
}

/**
 * Calculate the Recurring Donation Rate (ูุนุฏู ุงูุชุจุฑุนุงุช ุงููุชูุฑุฑุฉ).
 * The formula used is:
 * ูุนุฏู ุงูุชุจุฑุนุงุช ุงููุชูุฑุฑุฉ = (ุนุฏุฏ ุงููุชุจุฑุนูู ุงููุชูุฑุฑูู / ุฅุฌูุงูู ุนุฏุฏ ุงููุชุจุฑุนูู) ร 100
 *
 * @param {number} recurringDonors - The number of recurring donors (ุนุฏุฏ ุงููุชุจุฑุนูู ุงููุชูุฑุฑูู).
 * @param {number} totalDonors - The total number of donors (ุฅุฌูุงูู ุนุฏุฏ ุงููุชุจุฑุนูู).
 * @returns {number|string} - The Recurring Donation Rate in percentage, or an error message if total donors is 0.
 */
function calculateRecurringDonationRate(recurringDonors, totalDonors) {
  // Check if total donors is zero to avoid division by zero error
  if (totalDonors === 0) {
    return "Total number of donors cannot be zero";
  }

  // Calculate the recurring donation rate
  const recurringDonationRate = (recurringDonors / totalDonors) * 100;

  // Return the result as a percentage
  return recurringDonationRate;
}

/**
 * Calculate the Donation Percentage by Age Group (ูุณุจุฉ ุงูุชุจุฑุนุงุช ุญุณุจ ุงููุฆุฉ ุงูุนูุฑูุฉ).
 * The formula used is:
 * ูุณุจุฉ ุงูุชุจุฑุนุงุช ุญุณุจ ุงููุฆุฉ ุงูุนูุฑูุฉ = (ุนุฏุฏ ุงูุชุจุฑุนุงุช ูู ูุฆุฉ ุนูุฑูุฉ ูุนููุฉ / ุฅุฌูุงูู ุงูุชุจุฑุนุงุช) ร 100
 *
 * @param {number} donationsInAgeGroup - The number of donations in a specific age group (ุนุฏุฏ ุงูุชุจุฑุนุงุช ูู ูุฆุฉ ุนูุฑูุฉ ูุนููุฉ).
 * @param {number} totalDonations - The total number of donations (ุฅุฌูุงูู ุงูุชุจุฑุนุงุช).
 * @returns {number|string} - The Donation Percentage by Age Group in percentage, or an error message if total donations is 0.
 */
function calculateDonationPercentageByAgeGroup(
  donationsInAgeGroup,
  totalDonations
) {
  // Check if total donations is zero to avoid division by zero error
  if (totalDonations === 0) {
    return "Total donations cannot be zero";
  }

  // Calculate the donation percentage by age group
  const donationPercentage = (donationsInAgeGroup / totalDonations) * 100;

  // Return the result as a percentage
  return donationPercentage;
}

/**
 * Calculate the Donor Growth Rate (ูุนุฏู ุงูููู).
 * The formula used is:
 * ูุนุฏู ุงูููู = ((ุนุฏุฏ ุงููุชุจุฑุนูู ูู ููุงูุฉ ุงููุชุฑุฉ โ ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุจุฏุงูุฉ ุงููุชุฑุฉ) / ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุจุฏุงูุฉ ุงููุชุฑุฉ) ร 100
 *
 * @param {number} donorsAtEndOfPeriod - The number of donors at the end of the period (ุนุฏุฏ ุงููุชุจุฑุนูู ูู ููุงูุฉ ุงููุชุฑุฉ).
 * @param {number} donorsAtStartOfPeriod - The number of donors at the start of the period (ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุจุฏุงูุฉ ุงููุชุฑุฉ).
 * @returns {number|string} - The Donor Growth Rate in percentage, or an error message if donors at the start of the period is 0.
 */
function calculateDonorGrowthRate(donorsAtEndOfPeriod, donorsAtStartOfPeriod) {
  // Check if donors at the start of the period is zero to avoid division by zero error
  if (donorsAtStartOfPeriod === 0) {
    return 0;
  }

  // Calculate the donor growth rate
  const donorGrowthRate =
    ((donorsAtEndOfPeriod - donorsAtStartOfPeriod) / donorsAtStartOfPeriod) *
    100;

  // Return the result as a percentage
  return donorGrowthRate;
}

/**
 * Calculate the Stock Out Rate (ูุนุฏู ููุงุฏ ุงููุฎุฒูู).
 * The formula used is:
 * ูุนุฏู ููุงุฏ ุงููุฎุฒูู = (ุนุฏุฏ ุนูุงุตุฑ ุงูููุชุฌ ุงูุชู ููุฏุช / ุฅุฌูุงูู ุนุฏุฏ ุงูุนูุงุตุฑ ุงููุชุงุญุฉ) ร 100
 *
 * @param {number} stockOutItems - The number of out-of-stock items (ุนุฏุฏ ุนูุงุตุฑ ุงูููุชุฌ ุงูุชู ููุฏุช).
 * @param {number} totalAvailableItems - The total number of available items (ุฅุฌูุงูู ุนุฏุฏ ุงูุนูุงุตุฑ ุงููุชุงุญุฉ).
 * @returns {number|string} - The Stock Out Rate in percentage, or an error message if total available items is 0.
 */
function calculateStockOutRate(stockOutItems, totalAvailableItems) {
  // Check if total available items is zero to avoid division by zero error
  if (totalAvailableItems === 0) {
    return 0;
  }

  // Calculate the stock out rate
  const stockOutRate = (stockOutItems / totalAvailableItems) * 100;

  // Return the result as a percentage
  return stockOutRate;
}

/**
 * Calculate the Current Stock Level (ูุณุชูู ุงููุฎุฒูู ุงูุญุงูู).
 * This is the quantity of available stock for a specific product.
 *
 * @param {number} availableStock - The available stock quantity for a product (ูููุฉ ุงููุฎุฒูู ุงููุชุงุญุฉ ูู ุงูููุช ุงูุญุงูู).
 * @returns {number} - The current stock level.
 */
function calculateCurrentStockLevel(availableStock) {
  // Return the current stock level
  return availableStock;
}

/**
 * Calculate the Weekly Donor Growth Rate (ูุนุฏู ุงูููู ุงูุฃุณุจูุนู ูููุชุจุฑุนูู).
 * The formula used is:
 * ูุนุฏู ุงูููู ุงูุฃุณุจูุนู ูููุชุจุฑุนูู = (ุนุฏุฏ ุงููุชุจุฑุนูู ูุฐุง ุงูุฃุณุจูุน - ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฃุณุจูุน ุงููุงุถู) / ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฃุณุจูุน ุงููุงุถู ร 100
 *
 * @param {number} donorsThisWeek - The number of donors this week (ุนุฏุฏ ุงููุชุจุฑุนูู ูุฐุง ุงูุฃุณุจูุน).
 * @param {number} donorsLastWeek - The number of donors last week (ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุฃุณุจูุน ุงููุงุถู).
 * @returns {number|string} - The Weekly Donor Growth Rate in percentage, or an error message if donors last week is 0.
 */
function calculateWeeklyDonorGrowthRate(donorsThisWeek, donorsLastWeek) {
  // Check if donors last week is zero to avoid division by zero error
  if (donorsLastWeek === 0) {
    return "Number of donors last week cannot be zero";
  }

  // Calculate the weekly donor growth rate
  const weeklyDonorGrowthRate =
    ((donorsThisWeek - donorsLastWeek) / donorsLastWeek) * 100;

  // Return the result as a percentage
  return weeklyDonorGrowthRate;
}

/**
 * Calculate the Average Donation Time (ูุชูุณุท ููุช ุงูุชุจุฑุน).
 * The formula used is:
 * ูุชูุณุท ููุช ุงูุชุจุฑุน = ูุฌููุน ุงูููุช ุงููุณุชุบุฑู ููุชุจุฑุน / ุนุฏุฏ ุงููุชุจุฑุนูู
 *
 * @param {number} totalTimeSpent - The total time spent on donations (ูุฌููุน ุงูููุช ุงููุณุชุบุฑู ููุชุจุฑุน).
 * @param {number} numberOfDonors - The number of donors (ุนุฏุฏ ุงููุชุจุฑุนูู).
 * @returns {number|string} - The Average Donation Time, or an error message if the number of donors is 0.
 */
function calculateAverageDonationTime(totalTimeSpent, numberOfDonors) {
  // Check if the number of donors is zero to avoid division by zero error
  if (numberOfDonors === 0) {
    return "Number of donors cannot be zero";
  }

  // Calculate the average donation time
  const averageDonationTime = totalTimeSpent / numberOfDonors;

  // Return the result
  return averageDonationTime;
}

/**
 * Calculate the Donation Rate per Region (ูุณุจุฉ ุงูุชุจุฑุน ููู ููุทูุฉ).
 * The formula used is:
 * ูุณุจุฉ ุงูุชุจุฑุน ููู ููุทูุฉ = (ุนุฏุฏ ุงููุชุจุฑุนูู ูู ููุทูุฉ / ุนุฏุฏ ุงูุณูุงู ูู ุงูููุทูุฉ) ร 1000
 *
 * @param {number} donorsInRegion - The number of donors in the region (ุนุฏุฏ ุงููุชุจุฑุนูู ูู ุงูููุทูุฉ).
 * @param {number} populationInRegion - The population of the region (ุนุฏุฏ ุงูุณูุงู ูู ุงูููุทูุฉ).
 * @returns {number|string} - The Donation Rate per 1000 people in the region, or an error message if the population is 0.
 */
function calculateDonationRatePerRegion(donorsInRegion, populationInRegion) {
  // Check if population is zero to avoid division by zero error
  if (populationInRegion === 0) {
    return "Population in the region cannot be zero";
  }

  // Calculate the donation rate per 1000 people
  const donationRate = (donorsInRegion / populationInRegion) * 1000;

  // Return the result as the donation rate per 1000 people
  return donationRate;
}

/**
 * Calculate the Monthly Donor Growth per Region (ูุนุฏู ุงูููู ุงูุดูุฑู ูููุชุจุฑุนูู ูู ุงูููุงุทู).
 * The formula used is:
 * ูุนุฏู ุงูููู ุงูุดูุฑู ูููุชุจุฑุนูู ูู ุงูููุงุทู = (ุนุฏุฏ ุงููุชุจุฑุนูู ูุฐุง ุงูุดูุฑ - ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุดูุฑ ุงููุงุถู) / ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุดูุฑ ุงููุงุถู ร 100
 *
 * @param {number} donorsThisMonth - The number of donors this month (ุนุฏุฏ ุงููุชุจุฑุนูู ูุฐุง ุงูุดูุฑ).
 * @param {number} donorsLastMonth - The number of donors last month (ุนุฏุฏ ุงููุชุจุฑุนูู ุงูุดูุฑ ุงููุงุถู).
 * @returns {number|string} - The Monthly Donor Growth Rate per Region in percentage, or an error message if donors last month is 0.
 */
function calculateMonthlyDonorGrowthPerRegion(
  donorsThisMonth,
  donorsLastMonth
) {
  // Check if donors last month is zero to avoid division by zero error
  if (donorsLastMonth === 0) {
    return "Number of donors last month cannot be zero";
  }

  // Calculate the monthly donor growth rate per region
  const monthlyDonorGrowthRate =
    ((donorsThisMonth - donorsLastMonth) / donorsLastMonth) * 100;

  // Return the result as a percentage
  return monthlyDonorGrowthRate;
}

// ุชุตุฏูุฑ ุงูุฏูุงู ูุงุณุชุฎุฏุงููุง ูู ุฃูุงูู ุฃุฎุฑู
module.exports = {
  engagementRate,
  growthRate,
  updateFrequency,
  accountActivityScore,
  retentionRate,
  programDonorGrowthRate,
  programCompletionRate,
  totalDonations,
  donationGrowthRate,
  //   finanlcial
  calculateOperatingExpenseToRevenueRatio,
  calculateDonationPercentageByAgeGroup,
  calculateDonationsPerProgramRatio,
  calculateDonationToExpenseRatio,
  calculateRecurringDonationRate,
  calculateAverageDonationSize,
  calculateRevenueGrowthRate,
  calculateGrossProfitMargin,
  calculateDonorGrowthRate,
  netIncome,

  //   suplier
  calculateCurrentStockLevel,
  calculateStockOutRate,

  //   blood agency
  calculateMonthlyDonorGrowthPerRegion,
  calculateDonationRatePerRegion,
  calculateWeeklyDonorGrowthRate,
  calculateAverageDonationTime,
};
